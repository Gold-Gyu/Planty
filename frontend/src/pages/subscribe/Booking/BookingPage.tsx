import React, { useState, useEffect, useCallback } from 'react';
import IconText from 'components/atoms/common/IconText/IconText';
import BookingPageLayout from 'components/layout/Page/BookingPageLayout/BookingPageLayout';
import CalendarIcon from 'assets/icons/Calendar.svg';
import TimeIcon from 'assets/icons/Time.svg';
import PageTitleButton from 'components/atoms/common/PageTitleButton/PageTitleButton';
import { Value } from 'types/common/global';
import Button from 'components/atoms/common/Button/Button';
import BookingTimeList from 'components/organisms/booking/BookingTimeList/BookingTimeList';
import BOOKING_TIME_TEXT_LIST from 'constants/common/Booking';
import { findIsBookingInDateApi, saveBooking } from 'utils/api/booking';
import formatDate from 'utils/date/formatDate';
import { useParams } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import convertTime from 'utils/common/convertTime';
import useMovePage from 'hooks/useMovePage';
import confirmDialog from 'utils/common/confirmDialog';
import BookingCalendar from '../../../components/atoms/booking/BookingCalendar/BookingCalendar';

function BookingPage() {
	const { sid } = useParams();
	const { movePage } = useMovePage();
	const [selectDate, setSelectDate] = useState<Value>(new Date());
	const [selectTime, setSelectTime] = useState<number>(0);
	const [timeStatusList, setTimeStatusList] = useState<boolean[]>([]);

	/**
	 * ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
	 */
	const onSubmit = () => {
		const date = formatDate(selectDate as Date);
		const timeIdx = selectTime + 1;
		const message = `${date}Ïùò ${convertTime(timeIdx)}\nÏÑ†ÌÉùÌïòÏã† ÏùºÏãúÏóê ÏòàÏïΩÌïòÏãúÍ≤†ÏäµÎãàÍπå?`;

		// confirm OK
		const onConfirm = async () => {
			try {
				const response = await saveBooking(+(sid as string), date, timeIdx);
				if (response.status === 200) {
					toast.success(`${date} ${convertTime(timeIdx)}Ïóê ÏòàÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§üòä\nÏòàÏïΩ Í¥ÄÎ¶¨ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.`);
					movePage('/mypage/booking');
				} else {
					toast.error(`ÏòàÏïΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. \nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏãúÍ±∞ÎÇò, Îã§Î•∏ ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.`);
				}
			} catch (error) {
				console.error(error);
			}
		};
		// confirm
		confirmDialog({ title: 'ÏòàÏïΩÌïòÍ∏∞', message, confirmLabel: 'ÏòàÏïΩÌïòÍ∏∞', cancelLabel: 'Í∑∏ÎßåÎëêÍ∏∞', onConfirm });
	};

	/**
	 * selectDateÏùò ÏòàÏïΩ ÌòÑÌô© Time Î∞∞Ïó¥ Î∞õÏïÑÏò§Í∏∞
	 * ÏòàÏïΩÏù¥ ÎêòÏñ¥ÏûàÏúºÎ©¥ true, ÎêòÏñ¥ÏûàÏßÄÏïäÎã§Î©¥ false (false Ïù∏ Í≤ΩÏö∞ÏóêÎßå ÏòàÏïΩ Í∞ÄÎä•)
	 */
	const fetchData = useCallback(async (reqDate: Value, reqSid: string | undefined) => {
		try {
			const date = formatDate(reqDate as Date);

			const response = await findIsBookingInDateApi(date, +(reqSid as string));

			setTimeStatusList(response.data);
		} catch (error) {
			console.error(error);
		}
	}, []);

	useEffect(() => {
		fetchData(selectDate, sid);
	}, [selectDate, sid, fetchData]);

	return (
		<BookingPageLayout>
			{/* ÌéòÏù¥ÏßÄ Ìó§Îçî */}
			<PageTitleButton type="close" text="ÏòàÏïΩÌïòÍ∏∞" />

			{/* ÎÇ†Ïßú ÏÑ†ÌÉù */}
			<IconText imgUrl={CalendarIcon} text="ÎÇ†Ïßú ÏÑ†ÌÉù" />
			<BookingCalendar selectDate={selectDate} setSelectDate={setSelectDate} />

			{/* ÏãúÍ∞Ñ ÏÑ†ÌÉù */}
			<IconText imgUrl={TimeIcon} text="ÏãúÍ∞Ñ ÏÑ†ÌÉù" />
			<BookingTimeList
				selectTime={selectTime}
				setSelectTime={setSelectTime}
				timeTextList={BOOKING_TIME_TEXT_LIST}
				timeStatusList={timeStatusList}
			/>

			{/* ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº */}
			<Button isActive text="ÏòàÏïΩÌïòÍ∏∞" handleClick={onSubmit} />
		</BookingPageLayout>
	);
}

export default BookingPage;
